#ifndef __ZIM_AUDIO_H__
#define __ZIM_AUDIO_H__

//
//  zim_audio.h
//  ZIMAudio
//
//  Copyright Â© 2023 Zego. All rights reserved.
//

#include "zim_audio_defines.h"

ZIM_AUDIO_EXTERN_BEGIN

/**
 * Set android application context.
 *
 * Available since: 1.0.0
 *
 * Description: SDK needs your application context to get some necessary
 * information.
 *
 * Caution: For Android platform only, this function must be called before
 * calling any other function, otherwise the SDK will not work properly.
 *
 * @param context Android application context.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_set_android_context(void *context);

/**
 * Gets the SDK's version number.
 *
 * Available since: 1.0.0
 *
 * Description: Get the SDK version.
 *
 * Use cases:
 * 1. When the SDK is running, the developer finds that it does not match the
 * expected situation and submits the problem and related logs to the ZEGO
 * technical staff for locating. The ZEGO technical staff may need the
 * information of the engine version to assist in locating the problem.
 * 2. Developers can also collect this information as the version information of
 * the engine used by the app, so that the SDK corresponding to each version of
 * the app on the line.
 *
 * When to call: It can be called at any time.
 *
 * @return SDK version.
 */
ZIM_AUDIO_API const char *ZIM_AUDIO_CALL zim_audio_get_version(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_set_advanced_config(const char *key, const char *value);

/**
 * Generate the authorization information for requesting license.
 *
 * Available since: 1.0.0
 *
 * Description: When you need to request a license from ZEGO server API, you
 * need to call this function to generate the auth info.
 *
 * Caution: If the passed parameter is invalid, or if other problems occur (e.g.
 * Android context is not set), the auth info can not be generated.
 *
 * Note: You should use the [zse_free_auth_info] API to free [info] after use,
 * otherwise there will be a memory leak.
 *
 * @param info [in/out] The generated authorization information. Note that if
 * some problems occur, this pointer will be set to null.
 * @param app_id The ZEGO AppID.
 * @param app_sign The ZEGO AppSign for the AppID.
 */
//ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_generate_auth_info(char **info, unsigned int app_id,
//                                                               const char *app_sign);

/**
 * Release the authorization information generated by [zse_generate_auth_info]
 * API.
 *
 * Available since: 1.4.1
 *
 * @param info The authorization information char to be release.
 */
//ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_free_auth_info(char *info);

/**
 * Create an instance of Zego Speech Enhancer.
 *
 * Available since: 1.0.0
 *
 * Description: Create a ZSE instance for subsequent call to other member
 * functions.
 *
 * When to call: Before calling other member functions, you must call this API
 * to create a ZSE instance.
 *
 * Usage restriction: Currently, only one instance is supported, and repeated
 * calls will return the same instance.
 *
 * Impacts on other APIs: Failure to call this function will cause other member
 * functions to be unable to be called.
 *
 * Caution: For the C interface, if the "handle" is null after the call, it
 * means that the creation fails. Please use the "zim_audio_on_error" callback
 * to get detailed error information.
 *
 * @param handle [in/out] The handle of the instance.
 * @param license Authentication certificate.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_init(const char *license);

/**
 * Destroy the Zego Speech Enhancer instance.
 *
 * Available since: 1.0.0
 *
 * Description: Release the resources used by the ZSE instance. This function
 * must be called to release the occupied memory resources when ZSE is no longer
 * needed, otherwise a memory leak may occur.
 *
 * When to call: Call when ZSE is no longer needed, usually before deleting the
 * ZSE object.
 *
 * Note: After calling this function, ZSE internal functions can no longer be
 * used, and all callback notifications will no longer be triggered. If you need
 * to continue using the ZSE function, please call [create] again to create a
 * new instance.
 *
 * @param handle [in/out] The handle of the instance.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_uninit(void);

/**
 * Whether to enable automatic gain control (AGC).
 *
 * Available since: 1.0.0
 *
 * Description: After turning on this function, the SDK can automatically adjust
 * the microphone volume to adapt to near and far sound pickups and keep the
 * volume stable.
 *
 * Use case: When you need to ensure volume stability to improve call quality
 * and user experience, you can turn on this feature.
 *
 * Default value: When this function is not called, AGC is enabled by default.
 *
 * @param handle The handle of the instance.
 * @param enable Whether to enable automatic gain control, true: enable, false:
 * disable
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_enable_agc(bool enable);

/**
 * Whether to enable active noise suppression (ANS, aka ANC)
 *
 * Available since: 1.0.0
 *
 * Description: Enable the noise suppression can reduce the noise in the audio
 * data and make the human voice clearer.
 *
 * Use case: When you need to suppress noise to improve call quality and user
 * experience, you can turn on this feature.
 *
 * Default value: When this function is not called, ANS is enabled by default.
 *
 * @param handle The handle of the instance.
 * @param enable Whether to enable noise suppression, true: enable, false:
 * disable
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_enable_ans(bool enable);

/**
 * Sets the acoustic active noise suppression (ANS, aka ANC) parameters.
 *
 * Available since: 1.3.0
 *
 * Description: When [enableANS] is used to enable noise suppression, this
 * function can be used to switch between different noise suppression modes to
 * control the degree of noise suppression.
 *
 * Use case: When the default noise suppression effect does not meet
 * expectations, this function can be used to adjust the noise suppression mode.
 *
 * Default value: When this function is not called, the default echo
 * cancellation mode is [Medium].
 *
 * Restrictions: The value set by this function is valid only after the noise
 * suppression function is turned on.
 *
 * @param handle The handle of the instance.
 * @param param Noise Suppression parameter.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_set_ans_param(struct zim_audio_ans_param param);

/**
 * Sets the current audio route type for audio processing (AEC, ANS)
 *
 * Available since: 1.3.0
 *
 * Description: When using the AEC or ANS function, you can set the current
 * audio routing type to the SDK, so that the SDK can perform better audio
 * processing.
 *
 * Use case: When you know the device's current audio routing, you can set it to
 * the SDK.
 *
 * Default value: When this function is not called, the audio route type is
 * assumed to be [Speaker].
 *
 *
 * @param handle The handle of the instance.
 * @param type Audio route type parameter.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_set_route_type(enum zim_audio_route_type type);

/**
 * Start processing audio frames.
 *
 * Available since: 1.0.0
 *
 * Description: Initialize resource and start processing audio frames.
 *
 * When to call: Before calling "process" functions, you must call this API to
 * start processing.
 *
 * @param handle The handle of the instance.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_start_record(struct zim_audio_record_config config);

/**
 * Stop processing audio frames.
 *
 * Available since: 1.0.0
 *
 * Description: Stop processing audio frames and release resources.
 *
 * When to call: When you temporarily no need to process audio frames, you can
 * call this API to stop processing audio frames.
 *
 * @param handle The handle of the instance.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_complete_record(void);

/**
 * Cancel processing audio frames.
 *
 * Available since: 1.0.0
 *
 * Description: Stop processing audio frames and release resources.
 *
 * When to call: When you temporarily no need to process audio frames, you can
 * call this API to stop processing audio frames.
 *
 * @param handle The handle of the instance.
 */
ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_cancel_record(void);

ZIM_AUDIO_API bool ZIM_AUDIO_CALL zim_audio_is_recording(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_start_play(struct zim_audio_play_config config);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_stop_play(void);

ZIM_AUDIO_API bool ZIM_AUDIO_CALL zim_audio_is_playing(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_start_decode(zim_audio_decode_config config,
                                                         int instance_index);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_stop_decode(int instance_index);

ZIM_AUDIO_API void ZIM_AUDIO_CALL zim_audio_interruption_change(int interruption_type);

/**
 * The callback for error information.
 *
 * Available since: 1.0.0
 *
 * Description: When the SDK functions are not used correctly, the callback
 * prompts for detailed error information.
 *
 * Trigger: Notify the developer when an exception occurs in the SDK.
 *
 * @param handle ZSE instance.
 * @param error_info Error information, please refer to the error codes
 * document.
 */
typedef void (*zim_audio_on_error_event)(struct zim_audio_error error_info);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_error_event(zim_audio_on_error_event event_func);

typedef void (*zim_audio_on_recorder_started_event)(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_recorder_started_event(zim_audio_on_recorder_started_event event_func);

typedef void (*zim_audio_on_recorder_completed_event)(int total_duration);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_recorder_completed_event(zim_audio_on_recorder_completed_event event_func);

typedef void (*zim_audio_on_recorder_cancelled_event)(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_recorder_cancelled_event(zim_audio_on_recorder_cancelled_event event_func);

typedef void (*zim_audio_on_recorder_progress_event)(int current_duration);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_recorder_progress_event(zim_audio_on_recorder_progress_event event_func);

typedef void (*zim_audio_on_recorder_failed_event)(zim_audio_error_code error_code);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_recorder_failed_event(zim_audio_on_recorder_failed_event event_func);

typedef void (*zim_audio_on_player_started_event)(int total_duration);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_started_event(zim_audio_on_player_started_event event_func);

typedef void (*zim_audio_on_player_stopped_event)(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_stopped_event(zim_audio_on_player_stopped_event event_func);

typedef void (*zim_audio_on_player_ended_event)(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_ended_event(zim_audio_on_player_ended_event event_func);

typedef void (*zim_audio_on_player_interrupted_event)(void);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_interrupted_event(zim_audio_on_player_interrupted_event event_func);

typedef void (*zim_audio_on_player_progress_event)(int current_duration);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_progress_event(zim_audio_on_player_progress_event event_func);

typedef void (*zim_audio_on_player_failed_event)(zim_audio_error_code error_code);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_player_failed_event(zim_audio_on_player_failed_event event_func);

typedef void (*zim_audio_on_decoder_started_event)(int instance_index, int total_duration);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_decoder_started_event(zim_audio_on_decoder_started_event event_func);

typedef void (*zim_audio_on_decoder_stopped_event)(int instance_index);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_decoder_stopped_event(zim_audio_on_decoder_stopped_event event_func);

typedef void (*zim_audio_on_decoder_ended_event)(int instance_index);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_decoder_ended_event(zim_audio_on_decoder_ended_event event_func);

typedef void (*zim_audio_on_decoder_failed_event)(int instance_index,
                                                  zim_audio_error_code error_code);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_decoder_failed_event(zim_audio_on_decoder_failed_event event_func);

typedef void (*zim_audio_on_decoder_frame_event)(int instance_index, const unsigned char *data,
                                                 unsigned int size,
                                                 struct zim_audio_frame_param param);

ZIM_AUDIO_API void ZIM_AUDIO_CALL
zim_audio_register_on_decoder_frame_event(zim_audio_on_decoder_frame_event event_func);

ZIM_AUDIO_EXTERN_END

#endif //__ZIM_AUDIO_H__
